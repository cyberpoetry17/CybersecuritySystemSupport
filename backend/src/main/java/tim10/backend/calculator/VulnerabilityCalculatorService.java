package tim10.backend.calculator;

import org.springframework.stereotype.Service;

import net.sourceforge.jFuzzyLogic.FIS;
import net.sourceforge.jFuzzyLogic.plot.JFuzzyChart;
import tim10.backend.calculator.metrics.BaseMetrics;
import tim10.backend.calculator.metrics.EnvironmentalMetrics;
import tim10.backend.calculator.metrics.TemporalMetrics;
import tim10.backend.calculator.metrics.VulnerabilityMetrics;

@Service
public class VulnerabilityCalculatorService {
	
	private final String baseMetricsLogicPath = "../FuzzyLogic/base_score.fcl";
	private final String temporalMetricsLogicPath = "../FuzzyLogic/temporal_score.fcl";
	private final String environmentalMetricsLogicPath = "../FuzzyLogic/environmental_score.fcl";
	
	public double calculateVulnerabilityScore(VulnerabilityMetrics metrics) {
		double baseScore = calculateBaseScore(metrics.getBaseMetrics());
		double temporalScore = calculateTemporalScore(metrics.getTemporalMetrics(), baseScore);
		double environmentalScore = calculateEnvironmentalScore(metrics.getEnvironmentalMetrics(), temporalScore);
		
		return temporalScore;
	}
	
	private double calculateBaseScore(BaseMetrics baseMetrics) {
		 FIS fis = FIS.load(baseMetricsLogicPath, true);
		 
		 fis.setVariable("access_vector", baseMetrics.getAccessVector());
		 fis.setVariable("access_complexity", baseMetrics.getAccessComplexity());
		 fis.setVariable("authentication", baseMetrics.getAuthentication());
		 fis.setVariable("confidentiality_impact", baseMetrics.getConfidentialityImpact());

		 fis.evaluate();
		 
		 return 10 * fis.getVariable("base_score").getValue();
	}
	
	private double calculateTemporalScore(TemporalMetrics temporalMetrics, double baseScore) {
		FIS fis = FIS.load(temporalMetricsLogicPath, true);
		System.out.println(temporalMetrics);
		fis.setVariable("exploitability", temporalMetrics.getExploitability());
		fis.setVariable("remediation_level", temporalMetrics.getRemediationLevel());
		fis.setVariable("report_confidence", temporalMetrics.getReportConfidence());
		
		fis.evaluate();
		
		return baseScore * fis.getVariable("temporal_score").getValue();
	}
	
	private double calculateEnvironmentalScore(EnvironmentalMetrics environmentalMetrics, double temporalScore) {
		FIS fis = FIS.load(environmentalMetricsLogicPath, true);
		
		fis.setVariable("collateral_damage_potential", environmentalMetrics.getCollateralDamagePotential());
		fis.setVariable("target_distribution", environmentalMetrics.getTargetDistribution());
		
		fis.evaluate();
		
		return temporalScore * environmentalMetrics.getTargetDistribution() + 
				10 * fis.getVariable("environmental_score").getValue() - 
				temporalScore * fis.getVariable("environmental_score").getValue();
	}
}
